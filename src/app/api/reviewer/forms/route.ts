import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

// ‚úÖ ‡πÉ‡∏´‡πâ Reviewer ‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ roleName ‡πÉ‡∏ô FormAccess
export async function GET(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const roleName = searchParams.get("role");

    // ‚ùå ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ roleName ‡πÉ‡∏´‡πâ reviewer ‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
    if (!roleName || !roleName.startsWith("reviewer")) {
      return NextResponse.json({ error: "Missing or invalid role parameter" }, { status: 400 });
    }

    console.log("üìå Fetching all forms for reviewer:", roleName);

    // ‚úÖ ‡∏î‡∏∂‡∏á **‡∏ó‡∏∏‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°** ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (FormSubmission)
    const forms = await prisma.form.findMany({
      include: {
        submissions: true, // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• FormSubmission ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ü‡∏≠‡∏£‡πå‡∏°
      },
    });

    console.log("‚úÖ Total forms found:", forms.length);
    return NextResponse.json(forms);
  } catch (error) {
    console.error("‚ùå Error fetching reviewer forms:", error);
    return NextResponse.json({ error: "Error fetching reviewer forms" }, { status: 500 });
  }
}
