generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  users      User[]
  formAccess FormAccess[]
  Invite     Invite[]
}

model User {
  id          Int              @id @default(autoincrement())
  name        String
  email       String           @unique
  password    String
  role        Role             @relation(fields: [roleId], references: [id])
  roleId      Int
  submissions FormSubmission[] // ✅ เพิ่มความสัมพันธ์กลับไปยัง FormSubmission
  ExportLog   ExportLog[]
  resetToken        String?  @unique
  resetTokenExpiry  DateTime?
}

model Form {
  id          Int              @id @default(autoincrement())
  file        String           @unique
  description String           @default("")
  method      String?
  questions   Json
  access      FormAccess[]
  submissions FormSubmission[]
  ExportLog   ExportLog[]
  invites     Invite[]
}

model FormAccess {
  id     Int  @id @default(autoincrement())
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int
  form   Form @relation(fields: [formId], references: [id])
  formId Int

  @@unique([roleId, formId])
}

model FormSubmission {
  id              Int      @id @default(autoincrement())
  formId          Int
  userId          Int
  quarter         Int
  year            Int      @default(2025) // ✅ เพิ่ม default
  status          String   @default("Submitted")
  answers         Json
  lastSubmittedAt DateTime @default(now())
  createdAt       DateTime @default(now())

  form Form @relation(fields: [formId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model ExportLog {
  id         Int      @id @default(autoincrement())
  userId     Int
  formId     Int
  year       Int? // ✅ เพิ่ม year
  exportedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  form Form @relation(fields: [formId], references: [id])
}

model Invite {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  used      Boolean  @default(false)
  invitedAt DateTime @default(now())
  Form      Form?    @relation(fields: [formId], references: [id])
  formId    Int?
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}
